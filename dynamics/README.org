#+OPTIONS: toc:nil        (no default TOC at all)
* Interactively exploring non-linear time series.

A nice survey of [[https://appsilon.com/dash-vs-shiny/][dynamic visualization platforms]], Shiny with R still
looks good. Regarding the function at the heart of the question in
[[https://www.msn.com/en-us/weather/topstories/physicists-warn-earth-could-feasibly-descend-into-chaos/ar-AA1jqRUs?ocid=winp2fptaskbar&cvid=a876cef1a3d441cadbaa15e8bf522117&ei=35][Earth Descends Into Chaos]], it is directly implemented as [[https://search.r-project.org/CRAN/refmans/nonlinearTseries/html/logisticMap.html][logisticmap]]
in the R package nonlinearTseries.

Regarding how to plot, and what is actually being plotted, I had a
look at octave and gnuplot which I haven't worked with in a while, and
came back to R: the diagram is called a Fiegenbaum diagram and there's
a non-dynamic version [[https://www.magesblog.com/post/2012-03-17-logistic-map-feigenbaum-diagram/][on a blog post]] that can be simplified with the
logisticmap function and then made interactive in Shiny. On the way to
this, I found a statistical investigation of such systems that merits
revisiting at some point for its [[https://www.researchgate.net/figure/Comparison-of-different-nonlinear-methods-for-time-series-generated-by-logistic-map-For_fig5_332873823][appendix]].

To do this right, I'd like to be able to generate commented code in a
[[https://www.codecademy.com/learn/learn-git][revision controlled directory]], with a [[https://dataviz.shef.ac.uk/blog/05/02/2021/Shiny-Template][template for inserting the code]] in
Emacs, and [[https://gist.github.com/mindplace/b4b094157d7a3be6afd2c96370d39fad][push it to github.]]

** To reliably run this code using the best practices I've been able to come up with so far:

*** TODO [[https://support.apple.com/en-us/HT201541][Update OSX]].

*** TODO [[https://apps.apple.com/us/app/xcode/id497799835?mt=12][Install Xcode]].

*** TODO [[https://emacsformacosx.com/][Install Gnu Emacs]].

*** TODO Install Xcode command line utilities.
Launch Emacs and press the escape key at the top left of your
keyboard, and then the letter x and then type
#+begin_src
  eshell
#+end_src
and press return. This will place you in your command shell.
From here on, we'll call a sequence like this:
#+begin_src
  M-x eshell
#+end_src
From there, install Xcode command line tools by tying the following command
and pressing return:
#+begin_src zsh
  xcode-select --install
#+end_src

*** TODO [[https://docs.brew.sh/Installation][Install Homebrew]] for compiling and managing software installations.

*** TODO Install git.
Go back to your Emacs eshell and use homebrew to install git.  
#+begin_src eshell
 
  Welcome to the Emacs shell 

  ~/ $ brew install git
#+end_src

*** TODO [[https://cran.r-project.org/mirrors.html][Install R]].

*** TODO [[https://www.xquartz.org/][Install X Quartz]].

*** TODO In Emacs, install ess.
You may have to [[https://melpa.org/#/getting-started][install Melpa]], but only if the below doesn't work in
Emacs out of the box.

#+begin_src emacs
  M-x package-list-packages 
#+end_src

Then navigate to ess. Click on it to pop up an install buffer, then
click on the install button.

*** TODO Get this project.
#+begin_src eshell

  Welcome to the Emacs shell

  ~/ $ mkdir projects
  ~/ $ cd projects
  ~/projects $ git clone https://github.com:statlive/dynamics.git

  #+end_src

*** TODO Run the code.
Open the code in Emacs, then step through it by holding down the
control key and pressing c and then holding down the control key and
pressing n, denoted C-x C-n.

#+begin_src
  C-x C-f dynamics/app.R
  C-c C-n
  ...
  C-c C-n
#+end_src

